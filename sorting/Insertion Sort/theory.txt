Insertion Sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It works by dividing the list into a "sorted" and an "unsorted" part. Initially, the sorted part contains only the first element, and the unsorted part contains the rest. The algorithm then repeatedly takes the first element from the unsorted part and inserts it into the correct position in the sorted part. This process continues until the entire list is sorted.

// How Insertion Sort Works:
// Start with the second element (assuming the first element is already sorted).
// Compare the second element with the first. If it's smaller, insert it before the first element.
// Move to the third element. Compare it with the elements in the sorted part (i.e., the first two elements) and insert it into the correct position.
// Continue this process for all the elements, inserting each new element into its correct position in the sorted part.
// Real-Life Example: Sorting Cards in Your Hand
// Imagine you're playing cards and you're holding a hand of unsorted cards. Here's how you would sort them using insertion sort:

// First Card (already sorted): You start with one card, which is trivially sorted.
// Second Card: You pick up the next card and compare it with the first card. If it's smaller, you insert it before the first card; otherwise, you place it after the first card.
// Third Card: You pick up the third card and place it in the correct position relative to the first two cards.
// Next Cards: Repeat this process for each subsequent card, inserting each one into its correct position relative to the already sorted cards.
// By the end, all your cards will be sorted in ascending order.

// Example of Insertion Sort:
// Let’s sort the list [5, 3, 4, 1, 2] step by step using insertion sort:

// Initial List: [5, 3, 4, 1, 2]
// Step 1: Compare 3 with 5. Since 3 is smaller, insert it before 5 → [3, 5, 4, 1, 2]
// Step 2: Compare 4 with 5 (swap), then compare 4 with 3 (no swap) → [3, 4, 5, 1, 2]
// Step 3: Compare 1 with 5 (swap), then compare 1 with 4 (swap), then compare 1 with 3 (swap) → [1, 3, 4, 5, 2]
// Step 4: Compare 2 with 5 (swap), then compare 2 with 4 (swap), then compare 2 with 3 (swap), no swap with 1 → [1, 2, 3, 4, 5]
// Now, the list is sorted: [1, 2, 3, 4, 5].

// Key Points:
// Time Complexity: Insertion Sort has a time complexity of O(n²) in the worst case (e.g., when the list is sorted in reverse order) but is efficient for small or nearly sorted datasets.
// Space Complexity: O(1), as it sorts in place without needing extra memory.
// Best Use Case: It's efficient for small datasets or for data that's already mostly sorted.

